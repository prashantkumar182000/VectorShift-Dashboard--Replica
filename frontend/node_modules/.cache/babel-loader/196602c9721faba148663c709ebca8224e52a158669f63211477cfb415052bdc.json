{"ast":null,"code":"var _jsxFileName = \"/media/user/13125fdb-ae7d-4997-aceb-5ecc6c3abf3d3/Projects/frontend-20240915T063519Z-001 (copy)/frontend/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { PipelineToolbar } from './toolbar';\nimport { PipelineUI } from './ui';\nimport { SubmitButton } from './submit';\n\n// Function to generate random node data\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst generateRandomNodes = numNodes => {\n  let nodes = [];\n  for (let i = 1; i <= numNodes; i++) {\n    nodes.push({\n      id: i.toString(),\n      type: i === 1 ? 'input' : i === numNodes ? 'output' : 'default',\n      // Input for first, output for last\n      data: {\n        label: `Node ${i}`\n      },\n      position: {\n        x: Math.floor(Math.random() * 800),\n        // Increased X range\n        y: Math.floor(Math.random() * 600) // Increased Y range\n      },\n\n      style: {\n        border: '1px solid black',\n        padding: '10px',\n        borderRadius: '5px',\n        backgroundColor: `hsl(${Math.floor(Math.random() * 360)}, 70%, 80%)` // Random color\n      }\n    });\n  }\n\n  return nodes;\n};\n\n// Function to generate random edge data\nconst generateRandomEdges = nodes => {\n  let edges = [];\n  for (let i = 0; i < nodes.length - 1; i++) {\n    edges.push({\n      id: `e${i}-${i + 1}`,\n      source: nodes[i].id,\n      target: nodes[i + 1].id,\n      animated: Math.random() > 0.3,\n      // 30% chance of animation\n      label: `Edge ${i}-${i + 1}`,\n      style: {\n        stroke: `hsl(${Math.floor(Math.random() * 360)}, 70%, 50%)` // Random color\n      }\n    });\n  }\n  // Optionally add some random cross-links\n  for (let i = 0; i < nodes.length - 2; i++) {\n    if (Math.random() > 0.7) {\n      // 30% chance of cross-link\n      edges.push({\n        id: `e${i}-${i + 2}`,\n        source: nodes[i].id,\n        target: nodes[i + 2].id,\n        animated: Math.random() > 0.5,\n        label: `Cross-link ${i}-${i + 2}`,\n        style: {\n          stroke: `hsl(${Math.floor(Math.random() * 360)}, 70%, 50%)` // Random color\n        }\n      });\n    }\n  }\n\n  return edges;\n};\nfunction App() {\n  _s();\n  const [darkMode, setDarkMode] = useState(false);\n  const toggleDarkMode = () => {\n    document.body.classList.toggle('dark-mode');\n    setDarkMode(!darkMode);\n  };\n\n  // Generate 15 nodes and edges\n  const randomNodes = generateRandomNodes(8);\n  const randomEdges = generateRandomEdges(randomNodes);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      padding: '20px',\n      position: 'relative'\n    },\n    children: [/*#__PURE__*/_jsxDEV(PipelineToolbar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(PipelineUI, {\n      darkMode: darkMode\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(SubmitButton, {\n      nodes: randomNodes,\n      edges: randomEdges\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        position: 'absolute',\n        top: 20,\n        right: 20\n      },\n      children: /*#__PURE__*/_jsxDEV(\"label\", {\n        className: \"switch\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"checkbox\",\n          checked: darkMode,\n          onChange: toggleDarkMode\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"slider round\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 75,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"D2+2tCNohYwQ9K/tGnxPgGRQSlM=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","PipelineToolbar","PipelineUI","SubmitButton","jsxDEV","_jsxDEV","generateRandomNodes","numNodes","nodes","i","push","id","toString","type","data","label","position","x","Math","floor","random","y","style","border","padding","borderRadius","backgroundColor","generateRandomEdges","edges","length","source","target","animated","stroke","App","_s","darkMode","setDarkMode","toggleDarkMode","document","body","classList","toggle","randomNodes","randomEdges","children","fileName","_jsxFileName","lineNumber","columnNumber","top","right","className","checked","onChange","_c","$RefreshReg$"],"sources":["/media/user/13125fdb-ae7d-4997-aceb-5ecc6c3abf3d3/Projects/frontend-20240915T063519Z-001 (copy)/frontend/src/App.js"],"sourcesContent":["import React, { useState } from 'react';\nimport { PipelineToolbar } from './toolbar';\nimport { PipelineUI } from './ui';\nimport { SubmitButton } from './submit';\n\n// Function to generate random node data\nconst generateRandomNodes = (numNodes) => {\n  let nodes = [];\n  for (let i = 1; i <= numNodes; i++) {\n    nodes.push({\n      id: i.toString(),\n      type: i === 1 ? 'input' : i === numNodes ? 'output' : 'default', // Input for first, output for last\n      data: { label: `Node ${i}` },\n      position: {\n        x: Math.floor(Math.random() * 800),  // Increased X range\n        y: Math.floor(Math.random() * 600)   // Increased Y range\n      },\n      style: {\n        border: '1px solid black',\n        padding: '10px',\n        borderRadius: '5px',\n        backgroundColor: `hsl(${Math.floor(Math.random() * 360)}, 70%, 80%)` // Random color\n      }\n    });\n  }\n  return nodes;\n};\n\n// Function to generate random edge data\nconst generateRandomEdges = (nodes) => {\n  let edges = [];\n  for (let i = 0; i < nodes.length - 1; i++) {\n    edges.push({\n      id: `e${i}-${i + 1}`,\n      source: nodes[i].id,\n      target: nodes[i + 1].id,\n      animated: Math.random() > 0.3, // 30% chance of animation\n      label: `Edge ${i}-${i + 1}`,\n      style: {\n        stroke: `hsl(${Math.floor(Math.random() * 360)}, 70%, 50%)` // Random color\n      }\n    });\n  }\n  // Optionally add some random cross-links\n  for (let i = 0; i < nodes.length - 2; i++) {\n    if (Math.random() > 0.7) { // 30% chance of cross-link\n      edges.push({\n        id: `e${i}-${i + 2}`,\n        source: nodes[i].id,\n        target: nodes[i + 2].id,\n        animated: Math.random() > 0.5, \n        label: `Cross-link ${i}-${i + 2}`,\n        style: {\n          stroke: `hsl(${Math.floor(Math.random() * 360)}, 70%, 50%)` // Random color\n        }\n      });\n    }\n  }\n  return edges;\n};\n\nfunction App() {\n  const [darkMode, setDarkMode] = useState(false);\n\n  const toggleDarkMode = () => {\n    document.body.classList.toggle('dark-mode');\n    setDarkMode(!darkMode);\n  };\n\n  // Generate 15 nodes and edges\n  const randomNodes = generateRandomNodes(8);\n  const randomEdges = generateRandomEdges(randomNodes);\n\n  return (\n    <div style={{ padding: '20px', position: 'relative' }}>\n      <PipelineToolbar />\n      <PipelineUI darkMode={darkMode} />\n      <SubmitButton nodes={randomNodes} edges={randomEdges} />\n      <div style={{ position: 'absolute', top: 20, right: 20 }}>\n        <label className=\"switch\">\n          <input type=\"checkbox\" checked={darkMode} onChange={toggleDarkMode} />\n          <span className=\"slider round\"></span>\n        </label>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}