{"ast":null,"code":"var _jsxFileName = \"/media/user/13125fdb-ae7d-4997-aceb-5ecc6c3abf3d3/Projects/frontend-20240915T063519Z-001 (copy)/frontend/src/submit.js\";\nimport React from 'react';\n\n/**\n * Submits the nodes and edges data to the backend and displays the response.\n * @param {Array} nodes - The list of nodes.\n * @param {Array} edges - The list of edges.\n */\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst submitPipeline = async (nodes, edges) => {\n  try {\n    const response = await fetch('http://localhost:8000/pipelines/parse', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        nodes,\n        edges\n      }) // Ensure correct data structure\n    });\n\n    if (!response.ok) {\n      throw new Error('Network response was not ok');\n    }\n    const data = await response.json();\n    alert(`Pipeline Information:\n    - Number of nodes: ${data.num_nodes}\n    - Number of edges: ${data.num_edges}\n    - Is the pipeline a DAG: ${data.is_dag ? 'Yes' : 'No'}`);\n  } catch (error) {\n    console.error('There was a problem with the fetch operation:', error);\n    alert('Failed to submit the pipeline. Please check your backend connection.');\n  }\n};\n\n/**\n * SubmitButton component that triggers the submitPipeline function.\n * @param {Object} props - The props object.\n * @param {Array} props.nodes - The list of nodes.\n * @param {Array} props.edges - The list of edges.\n */\nconst SubmitButton = ({\n  nodes,\n  edges\n}) => {\n  return /*#__PURE__*/_jsxDEV(\"button\", {\n    onClick: () => submitPipeline(nodes, edges),\n    style: {\n      padding: '10px 20px',\n      borderRadius: '8px',\n      backgroundColor: '#6072da',\n      color: '#fff',\n      border: '2px solid #040627',\n      cursor: 'pointer',\n      fontSize: '16px',\n      fontWeight: 'bold'\n    },\n    children: \"Submit Pipeline\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 5\n  }, this);\n};\n_c = SubmitButton;\nexport default SubmitButton;\nvar _c;\n$RefreshReg$(_c, \"SubmitButton\");","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","submitPipeline","nodes","edges","response","fetch","method","headers","body","JSON","stringify","ok","Error","data","json","alert","num_nodes","num_edges","is_dag","error","console","SubmitButton","onClick","style","padding","borderRadius","backgroundColor","color","border","cursor","fontSize","fontWeight","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/media/user/13125fdb-ae7d-4997-aceb-5ecc6c3abf3d3/Projects/frontend-20240915T063519Z-001 (copy)/frontend/src/submit.js"],"sourcesContent":["import React from 'react';\n\n/**\n * Submits the nodes and edges data to the backend and displays the response.\n * @param {Array} nodes - The list of nodes.\n * @param {Array} edges - The list of edges.\n */\nconst submitPipeline = async (nodes, edges) => {\n  try {\n    const response = await fetch('http://localhost:8000/pipelines/parse', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({ nodes, edges }), // Ensure correct data structure\n    });\n\n    if (!response.ok) {\n      throw new Error('Network response was not ok');\n    }\n\n    const data = await response.json();\n\n    alert(`Pipeline Information:\n    - Number of nodes: ${data.num_nodes}\n    - Number of edges: ${data.num_edges}\n    - Is the pipeline a DAG: ${data.is_dag ? 'Yes' : 'No'}`);\n  } catch (error) {\n    console.error('There was a problem with the fetch operation:', error);\n    alert('Failed to submit the pipeline. Please check your backend connection.');\n  }\n};\n\n/**\n * SubmitButton component that triggers the submitPipeline function.\n * @param {Object} props - The props object.\n * @param {Array} props.nodes - The list of nodes.\n * @param {Array} props.edges - The list of edges.\n */\nconst SubmitButton = ({ nodes, edges }) => {\n  return (\n    <button\n      onClick={() => submitPipeline(nodes, edges)}\n      style={{\n        padding: '10px 20px',\n        borderRadius: '8px',\n        backgroundColor: '#6072da',\n        color: '#fff',\n        border: '2px solid #040627',\n        cursor: 'pointer',\n        fontSize: '16px',\n        fontWeight: 'bold',\n      }}\n    >\n      Submit Pipeline\n    </button>\n  );\n};\n\nexport default SubmitButton;"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;;AAEzB;AACA;AACA;AACA;AACA;AAJA,SAAAC,MAAA,IAAAC,OAAA;AAKA,MAAMC,cAAc,GAAG,MAAAA,CAAOC,KAAK,EAAEC,KAAK,KAAK;EAC7C,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,uCAAuC,EAAE;MACpEC,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACP,cAAc,EAAE;MAClB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QAAER,KAAK;QAAEC;MAAM,CAAC,CAAC,CAAE;IAC1C,CAAC,CAAC;;IAEF,IAAI,CAACC,QAAQ,CAACO,EAAE,EAAE;MAChB,MAAM,IAAIC,KAAK,CAAC,6BAA6B,CAAC;IAChD;IAEA,MAAMC,IAAI,GAAG,MAAMT,QAAQ,CAACU,IAAI,CAAC,CAAC;IAElCC,KAAK,CAAE;AACX,yBAAyBF,IAAI,CAACG,SAAU;AACxC,yBAAyBH,IAAI,CAACI,SAAU;AACxC,+BAA+BJ,IAAI,CAACK,MAAM,GAAG,KAAK,GAAG,IAAK,EAAC,CAAC;EAC1D,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,+CAA+C,EAAEA,KAAK,CAAC;IACrEJ,KAAK,CAAC,sEAAsE,CAAC;EAC/E;AACF,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA,MAAMM,YAAY,GAAGA,CAAC;EAAEnB,KAAK;EAAEC;AAAM,CAAC,KAAK;EACzC,oBACEH,OAAA;IACEsB,OAAO,EAAEA,CAAA,KAAMrB,cAAc,CAACC,KAAK,EAAEC,KAAK,CAAE;IAC5CoB,KAAK,EAAE;MACLC,OAAO,EAAE,WAAW;MACpBC,YAAY,EAAE,KAAK;MACnBC,eAAe,EAAE,SAAS;MAC1BC,KAAK,EAAE,MAAM;MACbC,MAAM,EAAE,mBAAmB;MAC3BC,MAAM,EAAE,SAAS;MACjBC,QAAQ,EAAE,MAAM;MAChBC,UAAU,EAAE;IACd,CAAE;IAAAC,QAAA,EACH;EAED;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAQ,CAAC;AAEb,CAAC;AAACC,EAAA,GAlBIhB,YAAY;AAoBlB,eAAeA,YAAY;AAAC,IAAAgB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}