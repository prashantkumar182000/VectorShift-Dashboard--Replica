{"ast":null,"code":"var _jsxFileName = \"/media/user/13125fdb-ae7d-4997-aceb-5ecc6c3abf3d3/Projects/Prashant_Kumar_technical_assessment/frontend/src/nodes/textNode.js\",\n  _s = $RefreshSig$();\n// src/nodes/TextNode.js\nimport { useState, useEffect } from 'react';\nimport { BaseNode } from './BaseNode';\nimport { Position } from 'reactflow';\nimport { useStore } from '../store';\n\n// Utility function to extract variables from text\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst extractVariables = text => {\n  const regex = /{{\\s*([a-zA-Z_$][0-9a-zA-Z_$]*)\\s*}}/g;\n  let match;\n  const variables = [];\n  while ((match = regex.exec(text)) !== null) {\n    variables.push(match[1]);\n  }\n  return variables;\n};\nexport const TextNode = ({\n  id,\n  data\n}) => {\n  _s();\n  const [currText, setCurrText] = useState((data === null || data === void 0 ? void 0 : data.text) || '{{input}}');\n  const [variableHandles, setVariableHandles] = useState([]);\n  const updateNodeField = useStore(state => state.updateNodeField);\n  const handleTextChange = e => setCurrText(e.target.value);\n  const nodeStyle = {\n    width: Math.max(200, currText.length * 10),\n    height: Math.max(100, currText.split('\\n').length * 20),\n    border: '1px solid #ddd',\n    borderRadius: 8,\n    padding: 10,\n    boxShadow: '0 2px 8px rgba(0, 0, 0, 0.2)',\n    backgroundColor: '#fff',\n    overflow: 'hidden'\n  };\n  return /*#__PURE__*/_jsxDEV(BaseNode, {\n    id: id,\n    label: \"Text\",\n    handles: [{\n      type: 'source',\n      position: Position.Right,\n      id: 'output',\n      style: {\n        top: '60%'\n      }\n    }, {\n      type: 'target',\n      position: Position.Left,\n      id: 'input',\n      style: {\n        top: '30%'\n      }\n    }, ...variableHandles],\n    style: nodeStyle,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: 'flex',\n        flexDirection: 'column',\n        gap: 5\n      },\n      children: /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Text:\", /*#__PURE__*/_jsxDEV(\"textarea\", {\n          value: currText,\n          onChange: handleTextChange,\n          style: {\n            marginLeft: 5,\n            padding: 5,\n            borderRadius: 4,\n            border: '1px solid #ccc',\n            width: '100%',\n            height: '100%',\n            boxSizing: 'border-box'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 5\n  }, this);\n};\n_s(TextNode, \"0G/KgrUZaGR2Ws7WBfSNqfLQU7k=\", false, function () {\n  return [useStore];\n});\n_c = TextNode;\nvar _c;\n$RefreshReg$(_c, \"TextNode\");","map":{"version":3,"names":["useState","useEffect","BaseNode","Position","useStore","jsxDEV","_jsxDEV","extractVariables","text","regex","match","variables","exec","push","TextNode","id","data","_s","currText","setCurrText","variableHandles","setVariableHandles","updateNodeField","state","handleTextChange","e","target","value","nodeStyle","width","Math","max","length","height","split","border","borderRadius","padding","boxShadow","backgroundColor","overflow","label","handles","type","position","Right","style","top","Left","children","display","flexDirection","gap","onChange","marginLeft","boxSizing","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/media/user/13125fdb-ae7d-4997-aceb-5ecc6c3abf3d3/Projects/Prashant_Kumar_technical_assessment/frontend/src/nodes/textNode.js"],"sourcesContent":["// src/nodes/TextNode.js\nimport { useState, useEffect } from 'react';\nimport { BaseNode } from './BaseNode';\nimport { Position } from 'reactflow';\nimport { useStore } from '../store';\n\n// Utility function to extract variables from text\nconst extractVariables = (text) => {\n  const regex = /{{\\s*([a-zA-Z_$][0-9a-zA-Z_$]*)\\s*}}/g;\n  let match;\n  const variables = [];\n  while ((match = regex.exec(text)) !== null) {\n    variables.push(match[1]);\n  }\n  return variables;\n};\n\nexport const TextNode = ({ id, data }) => {\n  const [currText, setCurrText] = useState(data?.text || '{{input}}');\n  const [variableHandles, setVariableHandles] = useState([]);\n  const updateNodeField = useStore(state => state.updateNodeField);\n\n\n\n  const handleTextChange = (e) => setCurrText(e.target.value);\n\n  const nodeStyle = {\n    width: Math.max(200, currText.length * 10),\n    height: Math.max(100, currText.split('\\n').length * 20),\n    border: '1px solid #ddd',\n    borderRadius: 8,\n    padding: 10,\n    boxShadow: '0 2px 8px rgba(0, 0, 0, 0.2)',\n    backgroundColor: '#fff',\n    overflow: 'hidden',\n  };\n\n  return (\n    <BaseNode\n      id={id}\n      label=\"Text\"\n      handles={[\n        { type: 'source', position: Position.Right, id: 'output', style: { top: '60%' } },\n        { type: 'target', position: Position.Left, id: 'input', style: { top: '30%' } },\n        ...variableHandles,\n      ]}\n      style={nodeStyle}\n    >\n      <div style={{ display: 'flex', flexDirection: 'column', gap: 5 }}>\n        <label>\n          Text:\n          <textarea\n            value={currText}\n            onChange={handleTextChange}\n            style={{\n              marginLeft: 5,\n              padding: 5,\n              borderRadius: 4,\n              border: '1px solid #ccc',\n              width: '100%',\n              height: '100%',\n              boxSizing: 'border-box',\n            }}\n          />\n        </label>\n      </div>\n    </BaseNode>\n  );\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}