{"ast":null,"code":"import _regeneratorRuntime from\"/media/user/13125fdb-ae7d-4997-aceb-5ecc6c3abf3d3/Projects/Prashant_Kumar_technical_assessment/frontend/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";import _asyncToGenerator from\"/media/user/13125fdb-ae7d-4997-aceb-5ecc6c3abf3d3/Projects/Prashant_Kumar_technical_assessment/frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";import React from'react';/**\n * Submits the nodes and edges data to the backend and displays the response.\n * @param {Array} nodes - The list of nodes.\n * @param {Array} edges - The list of edges.\n */import{jsx as _jsx}from\"react/jsx-runtime\";var submitPipeline=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee(nodes,edges){var response,data;return _regeneratorRuntime().wrap(function _callee$(_context){while(1)switch(_context.prev=_context.next){case 0:_context.prev=0;console.log('Submitting nodes:',nodes);// Debugging line\nconsole.log('Submitting edges:',edges);// Debugging line\n_context.next=5;return fetch('http://localhost:8000/pipelines/parse',{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({nodes:nodes,edges:edges})});case 5:response=_context.sent;if(response.ok){_context.next=8;break;}throw new Error('Network response was not ok');case 8:_context.next=10;return response.json();case 10:data=_context.sent;console.log('Received data:',data);// Debugging line\nalert(\"Pipeline Information:\\n- Number of nodes: \".concat(data.num_nodes,\"\\n- Number of edges: \").concat(data.num_edges,\"\\n- Is the pipeline a DAG: \").concat(data.is_dag?'Yes':'No'));_context.next=19;break;case 15:_context.prev=15;_context.t0=_context[\"catch\"](0);console.error('There was a problem with the fetch operation:',_context.t0);alert('Failed to submit the pipeline. Please check your backend connection.');case 19:case\"end\":return _context.stop();}},_callee,null,[[0,15]]);}));return function submitPipeline(_x,_x2){return _ref.apply(this,arguments);};}();/**\n * SubmitButton component that triggers the submitPipeline function.\n * @param {Object} props - The props object.\n * @param {Array} props.nodes - The list of nodes.\n * @param {Array} props.edges - The list of edges.\n * @param {Function} props.onGenerateData - Function to generate new random data.\n */var SubmitButton=function SubmitButton(_ref2){var nodes=_ref2.nodes,edges=_ref2.edges,onGenerateData=_ref2.onGenerateData;return/*#__PURE__*/_jsx(\"div\",{children:/*#__PURE__*/_jsx(\"button\",{onClick:function onClick(){submitPipeline(nodes,edges);onGenerateData();// Regenerate data after submission\n},style:{padding:'10px 20px',borderRadius:'8px',backgroundColor:'#6072da',color:'#fff',border:'2px solid #040627',cursor:'pointer',fontSize:'16px',fontWeight:'bold',marginTop:'20px',boxShadow:'0 2px 4px rgba(0, 0, 0, 0.1)'},children:\"Submit Pipeline\"})});};export{SubmitButton,submitPipeline};","map":{"version":3,"names":["React","jsx","_jsx","submitPipeline","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","nodes","edges","response","data","wrap","_callee$","_context","prev","next","console","log","fetch","method","headers","body","JSON","stringify","sent","ok","Error","json","alert","concat","num_nodes","num_edges","is_dag","t0","error","stop","_x","_x2","apply","arguments","SubmitButton","_ref2","onGenerateData","children","onClick","style","padding","borderRadius","backgroundColor","color","border","cursor","fontSize","fontWeight","marginTop","boxShadow"],"sources":["/media/user/13125fdb-ae7d-4997-aceb-5ecc6c3abf3d3/Projects/Prashant_Kumar_technical_assessment/frontend/src/submit.js"],"sourcesContent":["import React from 'react';\n\n/**\n * Submits the nodes and edges data to the backend and displays the response.\n * @param {Array} nodes - The list of nodes.\n * @param {Array} edges - The list of edges.\n */\nconst submitPipeline = async (nodes, edges) => {\n  try {\n    console.log('Submitting nodes:', nodes);  // Debugging line\n    console.log('Submitting edges:', edges);  // Debugging line\n\n    const response = await fetch('http://localhost:8000/pipelines/parse', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({ nodes, edges }),\n    });\n\n    if (!response.ok) {\n      throw new Error('Network response was not ok');\n    }\n\n    const data = await response.json();\n    console.log('Received data:', data);  // Debugging line\n\n    alert(`Pipeline Information:\\n- Number of nodes: ${data.num_nodes}\\n- Number of edges: ${data.num_edges}\\n- Is the pipeline a DAG: ${data.is_dag ? 'Yes' : 'No'}`);\n  } catch (error) {\n    console.error('There was a problem with the fetch operation:', error);\n    alert('Failed to submit the pipeline. Please check your backend connection.');\n  }\n};\n\n/**\n * SubmitButton component that triggers the submitPipeline function.\n * @param {Object} props - The props object.\n * @param {Array} props.nodes - The list of nodes.\n * @param {Array} props.edges - The list of edges.\n * @param {Function} props.onGenerateData - Function to generate new random data.\n */\nconst SubmitButton = ({ nodes, edges, onGenerateData }) => {\n  return (\n    <div>\n      <button\n        onClick={() => {\n          submitPipeline(nodes, edges);\n          onGenerateData();  // Regenerate data after submission\n        }}\n        style={{\n          padding: '10px 20px',\n          borderRadius: '8px',\n          backgroundColor: '#6072da',\n          color: '#fff',\n          border: '2px solid #040627',\n          cursor: 'pointer',\n          fontSize: '16px',\n          fontWeight: 'bold',\n          marginTop: '20px',\n          boxShadow: '0 2px 4px rgba(0, 0, 0, 0.1)',\n        }}\n      >\n        Submit Pipeline\n      </button>\n    </div>\n  );\n};\n\nexport { SubmitButton, submitPipeline };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}