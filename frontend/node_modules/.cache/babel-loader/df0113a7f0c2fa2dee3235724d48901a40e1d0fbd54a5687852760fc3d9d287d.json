{"ast":null,"code":"// src/store.js\n\nimport { create } from 'zustand';\nimport { applyNodeChanges, applyEdgeChanges } from 'reactflow';\nexport const useStore = create((set, get) => ({\n  nodes: [],\n  edges: [],\n  getNodeID: nodeType => `${nodeType}-${Math.random().toString(36).substr(2, 9)}`,\n  addNode: newNode => set(state => ({\n    nodes: [...state.nodes, newNode]\n  })),\n  onNodesChange: changes => set(state => ({\n    nodes: applyNodeChanges(changes, state.nodes)\n  })),\n  onEdgesChange: changes => set(state => ({\n    edges: applyEdgeChanges(changes, state.edges)\n  })),\n  onConnect: connection => set(state => ({\n    edges: [...state.edges, connection]\n  })),\n  updateNodeField: (id, field, value) => set(state => ({\n    nodes: state.nodes.map(node => node.id === id ? {\n      ...node,\n      data: {\n        ...node.data,\n        [field]: value\n      }\n    } : node)\n  }))\n}));","map":{"version":3,"names":["create","applyNodeChanges","applyEdgeChanges","useStore","set","get","nodes","edges","getNodeID","nodeType","Math","random","toString","substr","addNode","newNode","state","onNodesChange","changes","onEdgesChange","onConnect","connection","updateNodeField","id","field","value","map","node","data"],"sources":["/media/user/13125fdb-ae7d-4997-aceb-5ecc6c3abf3d3/Projects/frontend-20240915T063519Z-001 (copy)/frontend/src/store.js"],"sourcesContent":["// src/store.js\n\nimport { create } from 'zustand';\nimport { applyNodeChanges, applyEdgeChanges } from 'reactflow';\n\nexport const useStore = create((set, get) => ({\n  nodes: [],\n  edges: [],\n  getNodeID: (nodeType) => `${nodeType}-${Math.random().toString(36).substr(2, 9)}`,\n  addNode: (newNode) => set((state) => ({ nodes: [...state.nodes, newNode] })),\n  onNodesChange: (changes) => set((state) => ({ nodes: applyNodeChanges(changes, state.nodes) })),\n  onEdgesChange: (changes) => set((state) => ({ edges: applyEdgeChanges(changes, state.edges) })),\n  onConnect: (connection) => set((state) => ({ edges: [...state.edges, connection] })),\n  \n  updateNodeField: (id, field, value) => set((state) => ({\n    nodes: state.nodes.map((node) =>\n      node.id === id ? { ...node, data: { ...node.data, [field]: value } } : node\n    ),\n  })),\n}));\n"],"mappings":"AAAA;;AAEA,SAASA,MAAM,QAAQ,SAAS;AAChC,SAASC,gBAAgB,EAAEC,gBAAgB,QAAQ,WAAW;AAE9D,OAAO,MAAMC,QAAQ,GAAGH,MAAM,CAAC,CAACI,GAAG,EAAEC,GAAG,MAAM;EAC5CC,KAAK,EAAE,EAAE;EACTC,KAAK,EAAE,EAAE;EACTC,SAAS,EAAGC,QAAQ,IAAM,GAAEA,QAAS,IAAGC,IAAI,CAACC,MAAM,CAAC,CAAC,CAACC,QAAQ,CAAC,EAAE,CAAC,CAACC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAE,EAAC;EACjFC,OAAO,EAAGC,OAAO,IAAKX,GAAG,CAAEY,KAAK,KAAM;IAAEV,KAAK,EAAE,CAAC,GAAGU,KAAK,CAACV,KAAK,EAAES,OAAO;EAAE,CAAC,CAAC,CAAC;EAC5EE,aAAa,EAAGC,OAAO,IAAKd,GAAG,CAAEY,KAAK,KAAM;IAAEV,KAAK,EAAEL,gBAAgB,CAACiB,OAAO,EAAEF,KAAK,CAACV,KAAK;EAAE,CAAC,CAAC,CAAC;EAC/Fa,aAAa,EAAGD,OAAO,IAAKd,GAAG,CAAEY,KAAK,KAAM;IAAET,KAAK,EAAEL,gBAAgB,CAACgB,OAAO,EAAEF,KAAK,CAACT,KAAK;EAAE,CAAC,CAAC,CAAC;EAC/Fa,SAAS,EAAGC,UAAU,IAAKjB,GAAG,CAAEY,KAAK,KAAM;IAAET,KAAK,EAAE,CAAC,GAAGS,KAAK,CAACT,KAAK,EAAEc,UAAU;EAAE,CAAC,CAAC,CAAC;EAEpFC,eAAe,EAAEA,CAACC,EAAE,EAAEC,KAAK,EAAEC,KAAK,KAAKrB,GAAG,CAAEY,KAAK,KAAM;IACrDV,KAAK,EAAEU,KAAK,CAACV,KAAK,CAACoB,GAAG,CAAEC,IAAI,IAC1BA,IAAI,CAACJ,EAAE,KAAKA,EAAE,GAAG;MAAE,GAAGI,IAAI;MAAEC,IAAI,EAAE;QAAE,GAAGD,IAAI,CAACC,IAAI;QAAE,CAACJ,KAAK,GAAGC;MAAM;IAAE,CAAC,GAAGE,IACzE;EACF,CAAC,CAAC;AACJ,CAAC,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}