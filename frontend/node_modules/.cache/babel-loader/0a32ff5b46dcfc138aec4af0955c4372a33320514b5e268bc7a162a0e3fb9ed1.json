{"ast":null,"code":"// /frontend/src/submit.js\n\n/**\n * Submits the nodes and edges data to the backend and displays the response.\n * @param {Array} nodes - The list of nodes.\n * @param {Array} edges - The list of edges.\n */\nconst submitPipeline = async (nodes, edges) => {\n  try {\n    const response = await fetch('http://localhost:8000/pipelines/parse', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        nodes,\n        edges\n      })\n    });\n    if (!response.ok) {\n      throw new Error('Network response was not ok');\n    }\n    const data = await response.json();\n    alert(`Number of nodes: ${data.num_nodes}\\nNumber of edges: ${data.num_edges}\\nIs DAG: ${data.is_dag}`);\n  } catch (error) {\n    console.error('There was a problem with the fetch operation:', error);\n  }\n};\n\n// Uncomment and use this function where needed in your application\n// Example of usage:\n// const nodes = [...]; // Replace with actual node data\n// const edges = [...]; // Replace with actual edge data\n// submitPipeline(nodes, edges);\n\nexport default submitPipeline;","map":{"version":3,"names":["submitPipeline","nodes","edges","response","fetch","method","headers","body","JSON","stringify","ok","Error","data","json","alert","num_nodes","num_edges","is_dag","error","console"],"sources":["/media/user/13125fdb-ae7d-4997-aceb-5ecc6c3abf3d3/Projects/frontend-20240915T063519Z-001/frontend/src/submit.js"],"sourcesContent":["// /frontend/src/submit.js\n\n/**\n * Submits the nodes and edges data to the backend and displays the response.\n * @param {Array} nodes - The list of nodes.\n * @param {Array} edges - The list of edges.\n */\nconst submitPipeline = async (nodes, edges) => {\n  try {\n    const response = await fetch('http://localhost:8000/pipelines/parse', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({ nodes, edges }),\n    });\n\n    if (!response.ok) {\n      throw new Error('Network response was not ok');\n    }\n\n    const data = await response.json();\n\n    alert(`Number of nodes: ${data.num_nodes}\\nNumber of edges: ${data.num_edges}\\nIs DAG: ${data.is_dag}`);\n  } catch (error) {\n    console.error('There was a problem with the fetch operation:', error);\n  }\n};\n\n// Uncomment and use this function where needed in your application\n// Example of usage:\n// const nodes = [...]; // Replace with actual node data\n// const edges = [...]; // Replace with actual edge data\n// submitPipeline(nodes, edges);\n\nexport default submitPipeline;\n"],"mappings":"AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA,MAAMA,cAAc,GAAG,MAAAA,CAAOC,KAAK,EAAEC,KAAK,KAAK;EAC7C,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,uCAAuC,EAAE;MACpEC,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACP,cAAc,EAAE;MAClB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QAAER,KAAK;QAAEC;MAAM,CAAC;IACvC,CAAC,CAAC;IAEF,IAAI,CAACC,QAAQ,CAACO,EAAE,EAAE;MAChB,MAAM,IAAIC,KAAK,CAAC,6BAA6B,CAAC;IAChD;IAEA,MAAMC,IAAI,GAAG,MAAMT,QAAQ,CAACU,IAAI,CAAC,CAAC;IAElCC,KAAK,CAAE,oBAAmBF,IAAI,CAACG,SAAU,sBAAqBH,IAAI,CAACI,SAAU,aAAYJ,IAAI,CAACK,MAAO,EAAC,CAAC;EACzG,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,+CAA+C,EAAEA,KAAK,CAAC;EACvE;AACF,CAAC;;AAED;AACA;AACA;AACA;AACA;;AAEA,eAAelB,cAAc"},"metadata":{},"sourceType":"module","externalDependencies":[]}