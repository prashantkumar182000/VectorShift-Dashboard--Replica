{"ast":null,"code":"import _toConsumableArray from \"/media/user/13125fdb-ae7d-4997-aceb-5ecc6c3abf3d3/Projects/Prashant_Kumar_technical_assessment/frontend/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _defineProperty from \"/media/user/13125fdb-ae7d-4997-aceb-5ecc6c3abf3d3/Projects/Prashant_Kumar_technical_assessment/frontend/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport _objectSpread from \"/media/user/13125fdb-ae7d-4997-aceb-5ecc6c3abf3d3/Projects/Prashant_Kumar_technical_assessment/frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport { jsx, jsxs, Fragment } from 'react/jsx-runtime';\nimport { memo, useRef, useEffect } from 'react';\nimport cc from 'classcat';\nimport { drag } from 'd3-drag';\nimport { select } from 'd3-selection';\nimport { useNodeId, useStoreApi, useGetPointerPosition, clamp } from '@reactflow/core';\nvar ResizeControlVariant;\n(function (ResizeControlVariant) {\n  ResizeControlVariant[\"Line\"] = \"line\";\n  ResizeControlVariant[\"Handle\"] = \"handle\";\n})(ResizeControlVariant || (ResizeControlVariant = {}));\n\n// returns an array of two numbers (0, 1 or -1) representing the direction of the resize\n// 0 = no change, 1 = increase, -1 = decrease\nfunction getDirection(_ref) {\n  var width = _ref.width,\n    prevWidth = _ref.prevWidth,\n    height = _ref.height,\n    prevHeight = _ref.prevHeight,\n    invertX = _ref.invertX,\n    invertY = _ref.invertY;\n  var deltaWidth = width - prevWidth;\n  var deltaHeight = height - prevHeight;\n  var direction = [deltaWidth > 0 ? 1 : deltaWidth < 0 ? -1 : 0, deltaHeight > 0 ? 1 : deltaHeight < 0 ? -1 : 0];\n  if (deltaWidth && invertX) {\n    direction[0] = direction[0] * -1;\n  }\n  if (deltaHeight && invertY) {\n    direction[1] = direction[1] * -1;\n  }\n  return direction;\n}\nvar initPrevValues = {\n  width: 0,\n  height: 0,\n  x: 0,\n  y: 0\n};\nvar initStartValues = _objectSpread(_objectSpread({}, initPrevValues), {}, {\n  pointerX: 0,\n  pointerY: 0,\n  aspectRatio: 1\n});\nfunction ResizeControl(_ref2) {\n  var nodeId = _ref2.nodeId,\n    position = _ref2.position,\n    _ref2$variant = _ref2.variant,\n    variant = _ref2$variant === void 0 ? ResizeControlVariant.Handle : _ref2$variant,\n    className = _ref2.className,\n    _ref2$style = _ref2.style,\n    style = _ref2$style === void 0 ? {} : _ref2$style,\n    children = _ref2.children,\n    color = _ref2.color,\n    _ref2$minWidth = _ref2.minWidth,\n    minWidth = _ref2$minWidth === void 0 ? 10 : _ref2$minWidth,\n    _ref2$minHeight = _ref2.minHeight,\n    minHeight = _ref2$minHeight === void 0 ? 10 : _ref2$minHeight,\n    _ref2$maxWidth = _ref2.maxWidth,\n    maxWidth = _ref2$maxWidth === void 0 ? Number.MAX_VALUE : _ref2$maxWidth,\n    _ref2$maxHeight = _ref2.maxHeight,\n    maxHeight = _ref2$maxHeight === void 0 ? Number.MAX_VALUE : _ref2$maxHeight,\n    _ref2$keepAspectRatio = _ref2.keepAspectRatio,\n    keepAspectRatio = _ref2$keepAspectRatio === void 0 ? false : _ref2$keepAspectRatio,\n    shouldResize = _ref2.shouldResize,\n    onResizeStart = _ref2.onResizeStart,\n    onResize = _ref2.onResize,\n    onResizeEnd = _ref2.onResizeEnd;\n  var contextNodeId = useNodeId();\n  var id = typeof nodeId === 'string' ? nodeId : contextNodeId;\n  var store = useStoreApi();\n  var resizeControlRef = useRef(null);\n  var startValues = useRef(initStartValues);\n  var prevValues = useRef(initPrevValues);\n  var getPointerPosition = useGetPointerPosition();\n  var defaultPosition = variant === ResizeControlVariant.Line ? 'right' : 'bottom-right';\n  var controlPosition = position !== null && position !== void 0 ? position : defaultPosition;\n  useEffect(function () {\n    if (!resizeControlRef.current || !id) {\n      return;\n    }\n    var selection = select(resizeControlRef.current);\n    var enableX = controlPosition.includes('right') || controlPosition.includes('left');\n    var enableY = controlPosition.includes('bottom') || controlPosition.includes('top');\n    var invertX = controlPosition.includes('left');\n    var invertY = controlPosition.includes('top');\n    var dragHandler = drag().on('start', function (event) {\n      var _node$width, _node$height, _node$position$x, _node$position$y;\n      var node = store.getState().nodeInternals.get(id);\n      var _getPointerPosition = getPointerPosition(event),\n        xSnapped = _getPointerPosition.xSnapped,\n        ySnapped = _getPointerPosition.ySnapped;\n      prevValues.current = {\n        width: (_node$width = node === null || node === void 0 ? void 0 : node.width) !== null && _node$width !== void 0 ? _node$width : 0,\n        height: (_node$height = node === null || node === void 0 ? void 0 : node.height) !== null && _node$height !== void 0 ? _node$height : 0,\n        x: (_node$position$x = node === null || node === void 0 ? void 0 : node.position.x) !== null && _node$position$x !== void 0 ? _node$position$x : 0,\n        y: (_node$position$y = node === null || node === void 0 ? void 0 : node.position.y) !== null && _node$position$y !== void 0 ? _node$position$y : 0\n      };\n      startValues.current = _objectSpread(_objectSpread({}, prevValues.current), {}, {\n        pointerX: xSnapped,\n        pointerY: ySnapped,\n        aspectRatio: prevValues.current.width / prevValues.current.height\n      });\n      onResizeStart === null || onResizeStart === void 0 || onResizeStart(event, _objectSpread({}, prevValues.current));\n    }).on('drag', function (event) {\n      var _store$getState = store.getState(),\n        nodeInternals = _store$getState.nodeInternals,\n        triggerNodeChanges = _store$getState.triggerNodeChanges;\n      var _getPointerPosition2 = getPointerPosition(event),\n        xSnapped = _getPointerPosition2.xSnapped,\n        ySnapped = _getPointerPosition2.ySnapped;\n      var node = nodeInternals.get(id);\n      if (node) {\n        var changes = [];\n        var _startValues$current = startValues.current,\n          startX = _startValues$current.pointerX,\n          startY = _startValues$current.pointerY,\n          startWidth = _startValues$current.width,\n          startHeight = _startValues$current.height,\n          startNodeX = _startValues$current.x,\n          startNodeY = _startValues$current.y,\n          aspectRatio = _startValues$current.aspectRatio;\n        var _prevValues$current = prevValues.current,\n          prevX = _prevValues$current.x,\n          prevY = _prevValues$current.y,\n          prevWidth = _prevValues$current.width,\n          prevHeight = _prevValues$current.height;\n        var distX = Math.floor(enableX ? xSnapped - startX : 0);\n        var distY = Math.floor(enableY ? ySnapped - startY : 0);\n        var width = clamp(startWidth + (invertX ? -distX : distX), minWidth, maxWidth);\n        var height = clamp(startHeight + (invertY ? -distY : distY), minHeight, maxHeight);\n        if (keepAspectRatio) {\n          var nextAspectRatio = width / height;\n          var isDiagonal = enableX && enableY;\n          var isHorizontal = enableX && !enableY;\n          var isVertical = enableY && !enableX;\n          width = nextAspectRatio <= aspectRatio && isDiagonal || isVertical ? height * aspectRatio : width;\n          height = nextAspectRatio > aspectRatio && isDiagonal || isHorizontal ? width / aspectRatio : height;\n          if (width >= maxWidth) {\n            width = maxWidth;\n            height = maxWidth / aspectRatio;\n          } else if (width <= minWidth) {\n            width = minWidth;\n            height = minWidth / aspectRatio;\n          }\n          if (height >= maxHeight) {\n            height = maxHeight;\n            width = maxHeight * aspectRatio;\n          } else if (height <= minHeight) {\n            height = minHeight;\n            width = minHeight * aspectRatio;\n          }\n        }\n        var isWidthChange = width !== prevWidth;\n        var isHeightChange = height !== prevHeight;\n        if (invertX || invertY) {\n          var x = invertX ? startNodeX - (width - startWidth) : startNodeX;\n          var y = invertY ? startNodeY - (height - startHeight) : startNodeY;\n          // only transform the node if the width or height changes\n          var isXPosChange = x !== prevX && isWidthChange;\n          var isYPosChange = y !== prevY && isHeightChange;\n          if (isXPosChange || isYPosChange) {\n            var positionChange = {\n              id: node.id,\n              type: 'position',\n              position: {\n                x: isXPosChange ? x : prevX,\n                y: isYPosChange ? y : prevY\n              }\n            };\n            changes.push(positionChange);\n            prevValues.current.x = positionChange.position.x;\n            prevValues.current.y = positionChange.position.y;\n          }\n        }\n        if (isWidthChange || isHeightChange) {\n          var dimensionChange = {\n            id: id,\n            type: 'dimensions',\n            updateStyle: true,\n            resizing: true,\n            dimensions: {\n              width: width,\n              height: height\n            }\n          };\n          changes.push(dimensionChange);\n          prevValues.current.width = width;\n          prevValues.current.height = height;\n        }\n        if (changes.length === 0) {\n          return;\n        }\n        var direction = getDirection({\n          width: prevValues.current.width,\n          prevWidth: prevWidth,\n          height: prevValues.current.height,\n          prevHeight: prevHeight,\n          invertX: invertX,\n          invertY: invertY\n        });\n        var nextValues = _objectSpread(_objectSpread({}, prevValues.current), {}, {\n          direction: direction\n        });\n        var callResize = shouldResize === null || shouldResize === void 0 ? void 0 : shouldResize(event, nextValues);\n        if (callResize === false) {\n          return;\n        }\n        onResize === null || onResize === void 0 || onResize(event, nextValues);\n        triggerNodeChanges(changes);\n      }\n    }).on('end', function (event) {\n      var dimensionChange = {\n        id: id,\n        type: 'dimensions',\n        resizing: false\n      };\n      onResizeEnd === null || onResizeEnd === void 0 || onResizeEnd(event, _objectSpread({}, prevValues.current));\n      store.getState().triggerNodeChanges([dimensionChange]);\n    });\n    selection.call(dragHandler);\n    return function () {\n      selection.on('.drag', null);\n    };\n  }, [id, controlPosition, minWidth, minHeight, maxWidth, maxHeight, keepAspectRatio, getPointerPosition, onResizeStart, onResize, onResizeEnd]);\n  var positionClassNames = controlPosition.split('-');\n  var colorStyleProp = variant === ResizeControlVariant.Line ? 'borderColor' : 'backgroundColor';\n  var controlStyle = color ? _objectSpread(_objectSpread({}, style), {}, _defineProperty({}, colorStyleProp, color)) : style;\n  return jsx(\"div\", {\n    className: cc(['react-flow__resize-control', 'nodrag'].concat(_toConsumableArray(positionClassNames), [variant, className])),\n    ref: resizeControlRef,\n    style: controlStyle,\n    children: children\n  });\n}\nvar ResizeControl$1 = memo(ResizeControl);\nvar handleControls = ['top-left', 'top-right', 'bottom-left', 'bottom-right'];\nvar lineControls = ['top', 'right', 'bottom', 'left'];\nfunction NodeResizer(_ref3) {\n  var nodeId = _ref3.nodeId,\n    _ref3$isVisible = _ref3.isVisible,\n    isVisible = _ref3$isVisible === void 0 ? true : _ref3$isVisible,\n    handleClassName = _ref3.handleClassName,\n    handleStyle = _ref3.handleStyle,\n    lineClassName = _ref3.lineClassName,\n    lineStyle = _ref3.lineStyle,\n    color = _ref3.color,\n    _ref3$minWidth = _ref3.minWidth,\n    minWidth = _ref3$minWidth === void 0 ? 10 : _ref3$minWidth,\n    _ref3$minHeight = _ref3.minHeight,\n    minHeight = _ref3$minHeight === void 0 ? 10 : _ref3$minHeight,\n    _ref3$maxWidth = _ref3.maxWidth,\n    maxWidth = _ref3$maxWidth === void 0 ? Number.MAX_VALUE : _ref3$maxWidth,\n    _ref3$maxHeight = _ref3.maxHeight,\n    maxHeight = _ref3$maxHeight === void 0 ? Number.MAX_VALUE : _ref3$maxHeight,\n    _ref3$keepAspectRatio = _ref3.keepAspectRatio,\n    keepAspectRatio = _ref3$keepAspectRatio === void 0 ? false : _ref3$keepAspectRatio,\n    shouldResize = _ref3.shouldResize,\n    onResizeStart = _ref3.onResizeStart,\n    onResize = _ref3.onResize,\n    onResizeEnd = _ref3.onResizeEnd;\n  if (!isVisible) {\n    return null;\n  }\n  return jsxs(Fragment, {\n    children: [lineControls.map(function (c) {\n      return jsx(ResizeControl$1, {\n        className: lineClassName,\n        style: lineStyle,\n        nodeId: nodeId,\n        position: c,\n        variant: ResizeControlVariant.Line,\n        color: color,\n        minWidth: minWidth,\n        minHeight: minHeight,\n        maxWidth: maxWidth,\n        maxHeight: maxHeight,\n        onResizeStart: onResizeStart,\n        keepAspectRatio: keepAspectRatio,\n        shouldResize: shouldResize,\n        onResize: onResize,\n        onResizeEnd: onResizeEnd\n      }, c);\n    }), handleControls.map(function (c) {\n      return jsx(ResizeControl$1, {\n        className: handleClassName,\n        style: handleStyle,\n        nodeId: nodeId,\n        position: c,\n        color: color,\n        minWidth: minWidth,\n        minHeight: minHeight,\n        maxWidth: maxWidth,\n        maxHeight: maxHeight,\n        onResizeStart: onResizeStart,\n        keepAspectRatio: keepAspectRatio,\n        shouldResize: shouldResize,\n        onResize: onResize,\n        onResizeEnd: onResizeEnd\n      }, c);\n    })]\n  });\n}\nexport { ResizeControl$1 as NodeResizeControl, NodeResizer, ResizeControlVariant };","map":{"version":3,"names":["jsx","jsxs","Fragment","memo","useRef","useEffect","cc","drag","select","useNodeId","useStoreApi","useGetPointerPosition","clamp","ResizeControlVariant","getDirection","_ref","width","prevWidth","height","prevHeight","invertX","invertY","deltaWidth","deltaHeight","direction","initPrevValues","x","y","initStartValues","_objectSpread","pointerX","pointerY","aspectRatio","ResizeControl","_ref2","nodeId","position","_ref2$variant","variant","Handle","className","_ref2$style","style","children","color","_ref2$minWidth","minWidth","_ref2$minHeight","minHeight","_ref2$maxWidth","maxWidth","Number","MAX_VALUE","_ref2$maxHeight","maxHeight","_ref2$keepAspectRatio","keepAspectRatio","shouldResize","onResizeStart","onResize","onResizeEnd","contextNodeId","id","store","resizeControlRef","startValues","prevValues","getPointerPosition","defaultPosition","Line","controlPosition","current","selection","enableX","includes","enableY","dragHandler","on","event","_node$width","_node$height","_node$position$x","_node$position$y","node","getState","nodeInternals","get","_getPointerPosition","xSnapped","ySnapped","_store$getState","triggerNodeChanges","_getPointerPosition2","changes","_startValues$current","startX","startY","startWidth","startHeight","startNodeX","startNodeY","_prevValues$current","prevX","prevY","distX","Math","floor","distY","nextAspectRatio","isDiagonal","isHorizontal","isVertical","isWidthChange","isHeightChange","isXPosChange","isYPosChange","positionChange","type","push","dimensionChange","updateStyle","resizing","dimensions","length","nextValues","callResize","call","positionClassNames","split","colorStyleProp","controlStyle","_defineProperty","concat","_toConsumableArray","ref","ResizeControl$1","handleControls","lineControls","NodeResizer","_ref3","_ref3$isVisible","isVisible","handleClassName","handleStyle","lineClassName","lineStyle","_ref3$minWidth","_ref3$minHeight","_ref3$maxWidth","_ref3$maxHeight","_ref3$keepAspectRatio","map","c","NodeResizeControl"],"sources":["/media/user/13125fdb-ae7d-4997-aceb-5ecc6c3abf3d3/Projects/Prashant_Kumar_technical_assessment/frontend/node_modules/@reactflow/node-resizer/dist/esm/index.js"],"sourcesContent":["import { jsx, jsxs, Fragment } from 'react/jsx-runtime';\nimport { memo, useRef, useEffect } from 'react';\nimport cc from 'classcat';\nimport { drag } from 'd3-drag';\nimport { select } from 'd3-selection';\nimport { useNodeId, useStoreApi, useGetPointerPosition, clamp } from '@reactflow/core';\n\nvar ResizeControlVariant;\n(function (ResizeControlVariant) {\n    ResizeControlVariant[\"Line\"] = \"line\";\n    ResizeControlVariant[\"Handle\"] = \"handle\";\n})(ResizeControlVariant || (ResizeControlVariant = {}));\n\n// returns an array of two numbers (0, 1 or -1) representing the direction of the resize\n// 0 = no change, 1 = increase, -1 = decrease\nfunction getDirection({ width, prevWidth, height, prevHeight, invertX, invertY }) {\n    const deltaWidth = width - prevWidth;\n    const deltaHeight = height - prevHeight;\n    const direction = [deltaWidth > 0 ? 1 : deltaWidth < 0 ? -1 : 0, deltaHeight > 0 ? 1 : deltaHeight < 0 ? -1 : 0];\n    if (deltaWidth && invertX) {\n        direction[0] = direction[0] * -1;\n    }\n    if (deltaHeight && invertY) {\n        direction[1] = direction[1] * -1;\n    }\n    return direction;\n}\n\nconst initPrevValues = { width: 0, height: 0, x: 0, y: 0 };\nconst initStartValues = {\n    ...initPrevValues,\n    pointerX: 0,\n    pointerY: 0,\n    aspectRatio: 1,\n};\nfunction ResizeControl({ nodeId, position, variant = ResizeControlVariant.Handle, className, style = {}, children, color, minWidth = 10, minHeight = 10, maxWidth = Number.MAX_VALUE, maxHeight = Number.MAX_VALUE, keepAspectRatio = false, shouldResize, onResizeStart, onResize, onResizeEnd, }) {\n    const contextNodeId = useNodeId();\n    const id = typeof nodeId === 'string' ? nodeId : contextNodeId;\n    const store = useStoreApi();\n    const resizeControlRef = useRef(null);\n    const startValues = useRef(initStartValues);\n    const prevValues = useRef(initPrevValues);\n    const getPointerPosition = useGetPointerPosition();\n    const defaultPosition = variant === ResizeControlVariant.Line ? 'right' : 'bottom-right';\n    const controlPosition = position ?? defaultPosition;\n    useEffect(() => {\n        if (!resizeControlRef.current || !id) {\n            return;\n        }\n        const selection = select(resizeControlRef.current);\n        const enableX = controlPosition.includes('right') || controlPosition.includes('left');\n        const enableY = controlPosition.includes('bottom') || controlPosition.includes('top');\n        const invertX = controlPosition.includes('left');\n        const invertY = controlPosition.includes('top');\n        const dragHandler = drag()\n            .on('start', (event) => {\n            const node = store.getState().nodeInternals.get(id);\n            const { xSnapped, ySnapped } = getPointerPosition(event);\n            prevValues.current = {\n                width: node?.width ?? 0,\n                height: node?.height ?? 0,\n                x: node?.position.x ?? 0,\n                y: node?.position.y ?? 0,\n            };\n            startValues.current = {\n                ...prevValues.current,\n                pointerX: xSnapped,\n                pointerY: ySnapped,\n                aspectRatio: prevValues.current.width / prevValues.current.height,\n            };\n            onResizeStart?.(event, { ...prevValues.current });\n        })\n            .on('drag', (event) => {\n            const { nodeInternals, triggerNodeChanges } = store.getState();\n            const { xSnapped, ySnapped } = getPointerPosition(event);\n            const node = nodeInternals.get(id);\n            if (node) {\n                const changes = [];\n                const { pointerX: startX, pointerY: startY, width: startWidth, height: startHeight, x: startNodeX, y: startNodeY, aspectRatio, } = startValues.current;\n                const { x: prevX, y: prevY, width: prevWidth, height: prevHeight } = prevValues.current;\n                const distX = Math.floor(enableX ? xSnapped - startX : 0);\n                const distY = Math.floor(enableY ? ySnapped - startY : 0);\n                let width = clamp(startWidth + (invertX ? -distX : distX), minWidth, maxWidth);\n                let height = clamp(startHeight + (invertY ? -distY : distY), minHeight, maxHeight);\n                if (keepAspectRatio) {\n                    const nextAspectRatio = width / height;\n                    const isDiagonal = enableX && enableY;\n                    const isHorizontal = enableX && !enableY;\n                    const isVertical = enableY && !enableX;\n                    width = (nextAspectRatio <= aspectRatio && isDiagonal) || isVertical ? height * aspectRatio : width;\n                    height = (nextAspectRatio > aspectRatio && isDiagonal) || isHorizontal ? width / aspectRatio : height;\n                    if (width >= maxWidth) {\n                        width = maxWidth;\n                        height = maxWidth / aspectRatio;\n                    }\n                    else if (width <= minWidth) {\n                        width = minWidth;\n                        height = minWidth / aspectRatio;\n                    }\n                    if (height >= maxHeight) {\n                        height = maxHeight;\n                        width = maxHeight * aspectRatio;\n                    }\n                    else if (height <= minHeight) {\n                        height = minHeight;\n                        width = minHeight * aspectRatio;\n                    }\n                }\n                const isWidthChange = width !== prevWidth;\n                const isHeightChange = height !== prevHeight;\n                if (invertX || invertY) {\n                    const x = invertX ? startNodeX - (width - startWidth) : startNodeX;\n                    const y = invertY ? startNodeY - (height - startHeight) : startNodeY;\n                    // only transform the node if the width or height changes\n                    const isXPosChange = x !== prevX && isWidthChange;\n                    const isYPosChange = y !== prevY && isHeightChange;\n                    if (isXPosChange || isYPosChange) {\n                        const positionChange = {\n                            id: node.id,\n                            type: 'position',\n                            position: {\n                                x: isXPosChange ? x : prevX,\n                                y: isYPosChange ? y : prevY,\n                            },\n                        };\n                        changes.push(positionChange);\n                        prevValues.current.x = positionChange.position.x;\n                        prevValues.current.y = positionChange.position.y;\n                    }\n                }\n                if (isWidthChange || isHeightChange) {\n                    const dimensionChange = {\n                        id: id,\n                        type: 'dimensions',\n                        updateStyle: true,\n                        resizing: true,\n                        dimensions: {\n                            width: width,\n                            height: height,\n                        },\n                    };\n                    changes.push(dimensionChange);\n                    prevValues.current.width = width;\n                    prevValues.current.height = height;\n                }\n                if (changes.length === 0) {\n                    return;\n                }\n                const direction = getDirection({\n                    width: prevValues.current.width,\n                    prevWidth,\n                    height: prevValues.current.height,\n                    prevHeight,\n                    invertX,\n                    invertY,\n                });\n                const nextValues = { ...prevValues.current, direction };\n                const callResize = shouldResize?.(event, nextValues);\n                if (callResize === false) {\n                    return;\n                }\n                onResize?.(event, nextValues);\n                triggerNodeChanges(changes);\n            }\n        })\n            .on('end', (event) => {\n            const dimensionChange = {\n                id: id,\n                type: 'dimensions',\n                resizing: false,\n            };\n            onResizeEnd?.(event, { ...prevValues.current });\n            store.getState().triggerNodeChanges([dimensionChange]);\n        });\n        selection.call(dragHandler);\n        return () => {\n            selection.on('.drag', null);\n        };\n    }, [\n        id,\n        controlPosition,\n        minWidth,\n        minHeight,\n        maxWidth,\n        maxHeight,\n        keepAspectRatio,\n        getPointerPosition,\n        onResizeStart,\n        onResize,\n        onResizeEnd,\n    ]);\n    const positionClassNames = controlPosition.split('-');\n    const colorStyleProp = variant === ResizeControlVariant.Line ? 'borderColor' : 'backgroundColor';\n    const controlStyle = color ? { ...style, [colorStyleProp]: color } : style;\n    return (jsx(\"div\", { className: cc(['react-flow__resize-control', 'nodrag', ...positionClassNames, variant, className]), ref: resizeControlRef, style: controlStyle, children: children }));\n}\nvar ResizeControl$1 = memo(ResizeControl);\n\nconst handleControls = ['top-left', 'top-right', 'bottom-left', 'bottom-right'];\nconst lineControls = ['top', 'right', 'bottom', 'left'];\nfunction NodeResizer({ nodeId, isVisible = true, handleClassName, handleStyle, lineClassName, lineStyle, color, minWidth = 10, minHeight = 10, maxWidth = Number.MAX_VALUE, maxHeight = Number.MAX_VALUE, keepAspectRatio = false, shouldResize, onResizeStart, onResize, onResizeEnd, }) {\n    if (!isVisible) {\n        return null;\n    }\n    return (jsxs(Fragment, { children: [lineControls.map((c) => (jsx(ResizeControl$1, { className: lineClassName, style: lineStyle, nodeId: nodeId, position: c, variant: ResizeControlVariant.Line, color: color, minWidth: minWidth, minHeight: minHeight, maxWidth: maxWidth, maxHeight: maxHeight, onResizeStart: onResizeStart, keepAspectRatio: keepAspectRatio, shouldResize: shouldResize, onResize: onResize, onResizeEnd: onResizeEnd }, c))), handleControls.map((c) => (jsx(ResizeControl$1, { className: handleClassName, style: handleStyle, nodeId: nodeId, position: c, color: color, minWidth: minWidth, minHeight: minHeight, maxWidth: maxWidth, maxHeight: maxHeight, onResizeStart: onResizeStart, keepAspectRatio: keepAspectRatio, shouldResize: shouldResize, onResize: onResize, onResizeEnd: onResizeEnd }, c)))] }));\n}\n\nexport { ResizeControl$1 as NodeResizeControl, NodeResizer, ResizeControlVariant };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}